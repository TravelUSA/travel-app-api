#!/bin/sh

##
# Entrypoint script for both local dev and EC2 containers deployments

main() {
    [ $# -ge 1 ] && _exec "$@"

    if env | grep -q '^KUBERNETES_SERVICE_HOST='; then
        ensure_kube_env
    else
        init_env
        ensure_secret_key
    fi

    # collectstatic does not require the fully running system
    # so we do it first to save time.
    #check --tag settings staticfiles
    collectstatic
    # Migrate does check, but we want to check explicitly
    # because we will probably remove migrate at some point.
    #check

    if [ "x$SKIP_MIGRATIONS" != 'xENABLED' ]; then
        migrate
    fi

    #check --deploy

    _exec gunicorn \
        app.wsgi:application \
        -w 2 \
        -b :5052
}

##
# Exec with or without newrelic run-program wrapper
_exec() {
    if [ "x$NEWRELIC" = 'xENABLED' ] && [ "x$1" = xgunicorn ]; then
        newrelic_setup
        export NEW_RELIC_PROCESS_HOST_DISPLAY_NAME="$NEW_RELIC_PROCESS_HOST_DISPLAY_NAME_PREFIX-app-gunicorn"
        export NEW_RELIC_CONFIG_FILE=/etc/newrelic/newrelic.ini
        exec newrelic-admin run-program "$@"
    fi
    exec "$@"
}

##
# Sanity check that we are in a kubernetes environment.
ensure_kube_env() {
    if [ -s .env ]; then
        echo 'Error: you have a .env in a Kubernetes environment.'
        echo 'This may cause unexpected behavior.'
        exit 1
    fi >&2
    case "$SECRET_KEY" in
        changeme)
            echo 'Error: SECRET_KEY is changeme, so do that.'
            exit 1
            ;;
        # Django itself will error if SECRET_KEY is unset.
    esac
}

##
# Create the .env file if it doesn't already exist.
init_env() {
    [ -s .env ] && return
    if ! [ -s .env.example ]; then
        echo 'No .env.example found'
        return
    fi
    echo 'Copying .env.example to .env...'
    cp .env.example .env
}

##
# Ensure the .env has a SECRET_KEY setting.
ensure_secret_key() {
    [ -s .env ] || return
    grep -q '^SECRET_KEY=' .env && return
    {
        echo
        /srv/bin/generate_secret_key.py
    } >> .env
}

##
# Attempt a thing some number of times; sleeping between attempts.
try() {
    attempts=$1
    wait=$2
    shift 2
    printf 'Attempting "%s" up to %d times.\n' "$*" "$attempts"
    until "$@"; do
        status=$?
        attempts=$(( attempts - 1 ))
        [ "$attempts" -gt 0 ] || return $status
        printf 'Attempt failed. Sleeping for %d seconds.\n' "$wait"
        sleep "$wait"
        printf 'Attempting %d more times.\n' "$attempts"
    done
}

##
# Run Django's check framework
check() {
    try 3 2 app check "$@" || exit
}

##
# Run Django's migrate
migrate() {
    echo 'Running app migrate...'
    try 3 2 app migrate || exit
}

##
# Run Django's collectstatic
collectstatic() {
    echo 'Collecting static assets...'
    app collectstatic --no-input
}

##
# New Relic for PROD/EC2 deployments
newrelic_setup() {
    echo 'Install New Relic Python package...'
    pip install --upgrade --user newrelic
}

main "$@"

# vim: ts=2 sw=2 sts=2 et
